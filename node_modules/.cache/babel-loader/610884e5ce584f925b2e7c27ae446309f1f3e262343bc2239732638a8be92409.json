{"ast":null,"code":"import store from \"@/store/index.js\";\nimport axios from \"axios\";\nimport { mapState, mapActions } from \"vuex\";\nexport default {\n  name: \"Pokedex\",\n  data() {\n    return {\n      OpenButtonDisabled: false,\n      timeout: null,\n      OpenButtonInfo: \"Abrir\",\n      hasSaved: true,\n      hasSelled: true,\n      counter: \"5\",\n      hasPokemons: false,\n      multiLine: true,\n      snackbar: false,\n      hasPaided: false,\n      textSnackBar: ``,\n      pokemon: {\n        uid: 1,\n        id: 1,\n        name: \"Sin nombre\",\n        type: \"¡Abre una pokebola!\",\n        img: \"https://www.pngitem.com/pimgs/m/580-5807856_pokemon-pokeball-pokeball-transparent-background-hd-png-download.png\"\n      }\n    };\n  },\n  computed: {\n    ...mapState({\n      timer: state => state.timer,\n      pokemonsOwned: state => state.pokemonsOwned,\n      coins: state => state.coins\n    })\n  },\n  methods: {\n    ...mapActions([\"setTimer\"]),\n    startTimer() {\n      if (this.hasPaided === true) {\n        this.OpenButtonDisabled = true;\n        let countdown = setInterval(() => {\n          this.setTimer(this.timer - 1);\n          this.OpenButtonInfo = this.timer;\n          console.log(this.timer);\n          if (this.OpenButtonInfo === 0) {\n            clearInterval(countdown);\n            this.setTimer(30);\n            this.OpenButtonDisabled = false;\n            this.OpenButtonInfo = \"Abrir\";\n            this.hasPaided = false;\n          }\n        }, 1000);\n        this.$once(\"hook:beforeDestroy\", () => {\n          clearInterval(countdown);\n          console.log(\"beforeDestroy\");\n        });\n      }\n    },\n    obtenerPokemon(id) {\n      if (this.coins >= 10) {\n        this.decrementCoins(10);\n        this.hasPaided = true;\n      }\n      if (this.hasPaided === true) {\n        axios.get(`https://pokeapi.co/api/v2/pokemon/${id}`).then(response => {\n          console.log(response);\n          this.pokemon.img = response.data.sprites.front_default;\n          this.pokemon.type = response.data.name;\n          this.pokemon.id = response.data.id;\n          this.pokemon.name = \"Sin nombre\";\n          this.saveLastPokemonRolled();\n          this.hasSaved = false;\n          this.hasSelled = false;\n        }).catch(error => {\n          this.pokemon.type = \"No existe\";\n        });\n      } else {\n        this.textSnackBar = \"¡No tienes suficientes monedas!\";\n        this.snackbar = true;\n        this.hasPaided = false;\n      }\n    },\n    getRandomInt() {\n      return Math.floor(Math.random() * 906);\n    },\n    async savePokemon() {\n      if (this.pokemonsOwned.length > 0) {\n        uid = this.pokemonsOwned[this.pokemonsOwned.length - 1].uid + 1;\n      }\n      await this.$store.dispatch(\"addPokemon\", {\n        uid: this.pokemon.uid,\n        id: this.pokemon.id,\n        name: this.pokemon.name,\n        type: this.pokemon.type,\n        img: this.pokemon.img\n      });\n      this.hasSaved = true;\n      console.log(this.pokemonsOwned);\n    },\n    async sellPokemonNotOwned() {\n      this.$store.dispatch(\"removePokemon\", this.pokemon.id);\n      this.incrementCoins(20);\n      this.hasSelled = true;\n    },\n    incrementCoins(amount) {\n      store.commit(\"incrementCoins\", amount);\n    },\n    decrementCoins(amount) {\n      store.commit(\"decrementCoins\", amount);\n    },\n    saveLastPokemonRolled() {\n      store.commit(\"updateLastPokemonRolled\", {\n        id: this.pokemon.id,\n        type: this.pokemon.type,\n        img: this.pokemon.img\n      });\n    }\n  },\n  mounted() {\n    if (this.timer <= 29) {\n      this.OpenButtonDisabled = true;\n      let countdown = setInterval(() => {\n        this.setTimer(this.timer - 1);\n        this.OpenButtonInfo = this.timer;\n        if (this.OpenButtonInfo === 0) {\n          clearInterval(countdown);\n          this.setTimer(30);\n          this.OpenButtonDisabled = false;\n          this.OpenButtonInfo = \"Abrir\";\n          this.hasPaided = false;\n        }\n      }, 1000);\n      this.$once(\"hook:beforeDestroy\", () => {\n        clearInterval(countdown);\n        console.log(\"beforeDestroy\");\n      });\n    }\n    let ls = JSON.parse(localStorage.getItem(\"lastPokemon\"));\n    if (ls === null || ls === undefined) {\n      let pokemon = {\n        id: 1,\n        type: \"¡Abre una pokebola!\",\n        img: \"https://www.pngitem.com/pimgs/m/580-5807856_pokemon-pokeball-pokeball-transparent-background-hd-png-download.png\"\n      };\n      localStorage.setItem(\"lastPokemon\", JSON.stringify(pokemon));\n    } else {\n      this.pokemon.uid = ls.uid;\n      this.pokemon.id = ls.id;\n      this.pokemon.name = ls.name;\n      this.pokemon.type = ls.type;\n      this.pokemon.img = ls.img;\n    }\n  }\n};","map":{"version":3,"mappings":"AAsDA;AACA;AACA;AACA;EACAA;EAEAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;QACAf;QACAgB;QACAC;MACA;IACA;EACA;EAEAC;IACA;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACA;IAEAC;MACA;QACA;QACA;UACA;UACA;UACAC;UACA;YACAC;YACA;YACA;YACA;YACA;UACA;QACA;QAEA;UACAA;UACAD;QACA;MACA;IACA;IAEAE;MACA;QACA;QACA;MACA;MACA;QACAC,MACAC,+CACAC;UACAL;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACA,GACAM;UACA;QACA;MACA;QACA;QACA;QACA;MACA;IACA;IACAC;MACA;IACA;IACA;MACA;QACAjB;MACA;MACA;QACAA;QACAC;QACAf;QACAgB;QACAC;MACA;MACA;MACAO;IACA;IACA;MACA;MACA;MACA;IACA;IACAQ;MACAC;IACA;IACAC;MACAD;IACA;IACAE;MACAF;QACAlB;QACAC;QACAC;MACA;IACA;EACA;EAEAmB;IACA;MACA;MACA;QACA;QACA;QACA;UACAX;UACA;UACA;UACA;UACA;QACA;MACA;MAEA;QACAA;QACAD;MACA;IACA;IAEA;IAEA;MACA;QACAT;QACAC;QACAC;MACA;MACAoB;IACA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["name","data","OpenButtonDisabled","timeout","OpenButtonInfo","hasSaved","hasSelled","counter","hasPokemons","multiLine","snackbar","hasPaided","textSnackBar","pokemon","uid","id","type","img","computed","timer","pokemonsOwned","coins","methods","startTimer","console","clearInterval","obtenerPokemon","axios","get","then","catch","getRandomInt","incrementCoins","store","decrementCoins","saveLastPokemonRolled","mounted","localStorage"],"sourceRoot":"src/components","sources":["Pokedex.vue"],"sourcesContent":["<template>\n  <div class=\"container text-center\">\n    <v-card class=\"mx-auto\" max-width=\"300px\">\n      <v-img text-center max-width=\"300\" class=\"\" :src=\"pokemon.img\"> </v-img>\n\n      <div>\n        <v-card-title>{{ pokemon.type.toUpperCase() }}</v-card-title>\n        <v-card-text class=\"pb-0 text-left ms-4\"\n          >Número: {{ pokemon.id }}\n        </v-card-text>\n\n        <v-card-actions>\n          <v-btn\n            :disabled=\"hasSaved === true || hasSelled === true\"\n            color=\"green\"\n            @click=\"savePokemon()\"\n            text\n          >\n            Atrapar\n          </v-btn>\n          <v-btn\n            color=\"red\"\n            text\n            :disabled=\"hasSelled === true\"\n            @click=\"sellPokemonNotOwned()\"\n          >\n            Vender\n          </v-btn>\n        </v-card-actions>\n      </div>\n    </v-card>\n    <v-btn\n      :disabled=\"OpenButtonDisabled\"\n      @click=\"\n        obtenerPokemon(getRandomInt());\n        startTimer();\n      \"\n      class=\"mt-4\"\n      >{{ OpenButtonInfo }}</v-btn\n    >\n\n    <v-snackbar v-model=\"snackbar\" :multi-line=\"multiLine\">\n      {{ textSnackBar }}\n\n      <template v-slot:action=\"{ attrs }\">\n        <v-btn color=\"red\" text v-bind=\"attrs\" @click=\"snackbar = false\">\n          Close\n        </v-btn>\n      </template>\n    </v-snackbar>\n  </div>\n</template>\n\n<script>\nimport store from \"@/store/index.js\";\nimport axios from \"axios\";\nimport { mapState, mapActions } from \"vuex\";\nexport default {\n  name: \"Pokedex\",\n\n  data() {\n    return {\n      OpenButtonDisabled: false,\n      timeout: null,\n      OpenButtonInfo: \"Abrir\",\n      hasSaved: true,\n      hasSelled: true,\n      counter: \"5\",\n      hasPokemons: false,\n      multiLine: true,\n      snackbar: false,\n      hasPaided: false,\n      textSnackBar: ``,\n      pokemon: {\n        uid: 1,\n        id: 1,\n        name: \"Sin nombre\",\n        type: \"¡Abre una pokebola!\",\n        img: \"https://www.pngitem.com/pimgs/m/580-5807856_pokemon-pokeball-pokeball-transparent-background-hd-png-download.png\",\n      },\n    };\n  },\n\n  computed: {\n    ...mapState({\n      timer: (state) => state.timer,\n      pokemonsOwned: (state) => state.pokemonsOwned,\n      coins: (state) => state.coins,\n    }),\n  },\n\n  methods: {\n    ...mapActions([\"setTimer\"]),\n\n    startTimer() {\n      if (this.hasPaided === true) {\n        this.OpenButtonDisabled = true;\n        let countdown = setInterval(() => {\n          this.setTimer(this.timer - 1);\n          this.OpenButtonInfo = this.timer;\n          console.log(this.timer);\n          if (this.OpenButtonInfo === 0) {\n            clearInterval(countdown);\n            this.setTimer(30);\n            this.OpenButtonDisabled = false;\n            this.OpenButtonInfo = \"Abrir\";\n            this.hasPaided = false;\n          }\n        }, 1000);\n\n        this.$once(\"hook:beforeDestroy\", () => {\n          clearInterval(countdown);\n          console.log(\"beforeDestroy\");\n        });\n      }\n    },\n\n    obtenerPokemon(id) {\n      if (this.coins >= 10) {\n        this.decrementCoins(10);\n        this.hasPaided = true;\n      }\n      if (this.hasPaided === true) {\n        axios\n          .get(`https://pokeapi.co/api/v2/pokemon/${id}`)\n          .then((response) => {\n            console.log(response);\n            this.pokemon.img = response.data.sprites.front_default;\n            this.pokemon.type = response.data.name;\n            this.pokemon.id = response.data.id;\n            this.pokemon.name = \"Sin nombre\";\n            this.saveLastPokemonRolled();\n            this.hasSaved = false;\n            this.hasSelled = false;\n          })\n          .catch((error) => {\n            this.pokemon.type = \"No existe\";\n          });\n      } else {\n        this.textSnackBar = \"¡No tienes suficientes monedas!\";\n        this.snackbar = true;\n        this.hasPaided = false;\n      }\n    },\n    getRandomInt() {\n      return Math.floor(Math.random() * 906);\n    },\n    async savePokemon() {\n      if (this.pokemonsOwned.length > 0) {\n        uid = this.pokemonsOwned[this.pokemonsOwned.length - 1].uid + 1;\n      }\n      await this.$store.dispatch(\"addPokemon\", {\n        uid: this.pokemon.uid,\n        id: this.pokemon.id,\n        name: this.pokemon.name,\n        type: this.pokemon.type,\n        img: this.pokemon.img,\n      });\n      this.hasSaved = true;\n      console.log(this.pokemonsOwned);\n    },\n    async sellPokemonNotOwned() {\n      this.$store.dispatch(\"removePokemon\", this.pokemon.id);\n      this.incrementCoins(20);\n      this.hasSelled = true;\n    },\n    incrementCoins(amount) {\n      store.commit(\"incrementCoins\", amount);\n    },\n    decrementCoins(amount) {\n      store.commit(\"decrementCoins\", amount);\n    },\n    saveLastPokemonRolled() {\n      store.commit(\"updateLastPokemonRolled\", {\n        id: this.pokemon.id,\n        type: this.pokemon.type,\n        img: this.pokemon.img,\n      });\n    },\n  },\n\n  mounted() {\n    if (this.timer <= 29) {\n      this.OpenButtonDisabled = true;\n      let countdown = setInterval(() => {\n        this.setTimer(this.timer - 1);\n        this.OpenButtonInfo = this.timer;\n        if (this.OpenButtonInfo === 0) {\n          clearInterval(countdown);\n          this.setTimer(30);\n          this.OpenButtonDisabled = false;\n          this.OpenButtonInfo = \"Abrir\";\n          this.hasPaided = false;\n        }\n      }, 1000);\n\n      this.$once(\"hook:beforeDestroy\", () => {\n        clearInterval(countdown);\n        console.log(\"beforeDestroy\");\n      });\n    }\n\n    let ls = JSON.parse(localStorage.getItem(\"lastPokemon\"));\n\n    if (ls === null || ls === undefined) {\n      let pokemon = {\n        id: 1,\n        type: \"¡Abre una pokebola!\",\n        img: \"https://www.pngitem.com/pimgs/m/580-5807856_pokemon-pokeball-pokeball-transparent-background-hd-png-download.png\",\n      };\n      localStorage.setItem(\"lastPokemon\", JSON.stringify(pokemon));\n    } else {\n      this.pokemon.uid = ls.uid;\n      this.pokemon.id = ls.id;\n      this.pokemon.name = ls.name;\n      this.pokemon.type = ls.type;\n      this.pokemon.img = ls.img;\n    }\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}